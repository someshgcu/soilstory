from pydantic import BaseModel, Field
from typing import Optional, List, Dict, Any
from datetime import datetime

class StoryBase(BaseModel):
    """Base schema for stories"""
    title: Optional[str] = Field(None, max_length=100)
    content: str = Field(..., min_length=10)
    metadata: Optional[Dict[str, Any]] = None

class StoryCreate(StoryBase):
    """Schema for creating a new story"""
    soil_entry_id: str

class StoryUpdate(BaseModel):
    """Schema for updating a story"""
    title: Optional[str] = Field(None, max_length=100)
    metadata: Optional[Dict[str, Any]] = None
    # Note: We don't allow updating the content after creation
    # as it's generated by AI and should remain as-is

class StoryInDB(StoryBase):
    """Schema for story as stored in the database"""
    id: str
    user_id: str
    soil_entry_id: str
    created_at: datetime
    updated_at: datetime

class StoryResponse(StoryBase):
    """Schema for story response"""
    id: str
    user_id: str
    soil_entry_id: str
    created_at: datetime
    updated_at: datetime

class StoryGenerationRequest(BaseModel):
    """Schema for requesting story generation"""
    soil_entry_id: str
    preferences: Optional[Dict[str, Any]] = None  # e.g., {"tone": "informative", "audience": "children"}